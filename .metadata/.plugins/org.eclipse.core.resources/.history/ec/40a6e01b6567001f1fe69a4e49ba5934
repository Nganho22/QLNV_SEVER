package QLNVdbsAPI.controller;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.http.HttpStatus;
import java.util.Optional;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import java.util.List;
import java.util.ArrayList;
import org.springframework.web.bind.annotation.PathVariable;

@RestController
@RequestMapping("/api")
public class DatabaseController{
	@Autowired
    private NhanVienRepository repo;

    @PostMapping("/nhanvien")
    public ResponseEntity<NhanVien> createNhanVien(@RequestBody NhanVien nhanvien) {
        try {
            NhanVien savedNhanVien = repo.save(nhanvien);
            return new ResponseEntity<>(savedNhanVien, HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/nhanvien/{id}")
    public ResponseEntity<NhanVien> updateNhanVien(@PathVariable("id") String id, @RequestBody NhanVien nhanvien) {
        Optional<NhanVien> nhanvienData = repo.findById(id);
        if (nhanvienData.isPresent()) {
            NhanVien existingNhanVien = nhanvienData.get();
            existingNhanVien.setHoten(nhanvien.getHoten());
            existingNhanVien.setSoNamKinhNghiem(nhanvien.getSoNamKinhNghiem());
            existingNhanVien.setThuviec(nhanvien.isThuviec());
            return new ResponseEntity<>(repo.save(existingNhanVien), HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @DeleteMapping("/nhanvien/{id}")
    public ResponseEntity<HttpStatus> deleteNhanVien(@PathVariable("id") String id) {
        try {
            repo.deleteById(id);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @DeleteMapping("/nhanvienall")
    public ResponseEntity<HttpStatus> deleteAllNhanVien() {
        try {
            repo.deleteAll();
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (Exception e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @GetMapping("/nhanvien")
    public ResponseEntity<List<NhanVien>> getAllNhanVien() {
        try {
            List<NhanVien> nhanvienList = new ArrayList<>();
            repo.findAll().forEach(nhanvienList::add);
            if (nhanvienList.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
            return new ResponseEntity<>(nhanvienList, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

}
